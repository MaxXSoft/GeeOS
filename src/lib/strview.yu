public import arch.arch
public import lib.c.string

public struct StrView {
  str: u8*,
  len: usize,
}

// create a new string view by a null terminated string
inline def newStrView(str: u8*): StrView {
  [StrView] {str, strlen(str)}
}

// create a new string view by a slice of bytes
inline def newStrView(buf: u8*, len: usize): StrView {
  [StrView] {buf, len}
}

// get string data of string view (not guarantee to be null terminated)
inline def getStr(this: StrView&): u8* {
  this.str
}

// get length of string view
inline def getLen(this: StrView&): usize {
  this.len
}

// check whether the view is empty
inline def empty(this: StrView&): bool {
  this.len == 0 as usize
}

// get the specified character
inline def at(this: StrView&, i: i32): u8 {
  this.str[i]
}
inline def at(this: StrView&, i: usize): u8 {
  this.str[i]
}

// get the first character
inline def front(this: StrView&): u8 {
  this.str[0]
}

// get the last character
inline def back(this: StrView&): u8 {
  this.str[this.len - 1 as usize]
}

// check if equals to a null terminated string
public def ==(this: StrView&, str: u8*): bool {
  var i = 0
  while i as usize < this.len {
    if this.str[i] != str[i] || str[i] == '\0' {
      return false
    }
    i += 1
  }
  str[i] == '\0'
}
inline def !=(this: StrView&, str: u8*): bool {
  !(this == str)
}
inline def ==(str: u8*, this: StrView&): bool {
  this == str
}
inline def !=(str: u8*, this: StrView&): bool {
  !(this == str)
}

// check if equals to another string view
public def ==(this: StrView&, that: StrView&): bool {
  if this.len == that.len {
    var i = 0
    while i as usize < this.len {
      if this.str[i] != that.str[i] {
        return false
      }
      i += 1
    }
    true
  }
  else {
    false
  }
}
inline def !=(this: StrView&, that: StrView&): bool {
  !(this == that)
}

// shrinks the view by moving its start forward
inline def removePrefix(this: StrView var&, n: i32) {
  this.str += n
  this.len -= n as usize
}

// shrinks the view by moving its end backward
inline def removeSuffix(this: StrView var&, n: i32) {
  this.len -= n as usize
}


public struct StrViewSplitIter {
  cur: u8*,
  len: usize,
  delimiter: u8,
}

// get split iterator
inline def split(this: StrView&, delimiter: u8): StrViewSplitIter {
  [StrViewSplitIter] {this.str, this.len, delimiter}
}

// iterator method 'next'
public def next(this: StrViewSplitIter var&): StrView {
  // find next position of delimiter
  var len = 0 as usize
  while len < this.len {
    if this.cur[len] == this.delimiter {
      break
    }
    len += 1 as usize
  }
  // get next string view
  let sv = newStrView(this.cur, len)
  // update current iterator
  if len < this.len {
    len += 1 as usize
  }
  this.cur += len
  this.len -= len
  sv
}

// iterator method 'last'
inline def last(this: StrViewSplitIter&): bool {
  this.len == 0 as usize
}

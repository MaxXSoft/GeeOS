public import arch.arch
public import mem.handler
public import mem.attr
public import mem.paging

import lib.alloc


// representation of a memory area 
public struct MemoryArea {
  start: usize,
  end: usize,
  handler: MemoryHandler var*,
  attr: MemoryAttr,
}

public def newMemArea(start: usize, end: usize,
                      handler: MemoryHandler var*,
                      attr: MemoryAttr): MemoryArea {
  handler.incCounter()
  [MemoryArea] {start, end, handler, attr}
}

public def del(this: MemoryArea var&) {
  this.handler.decCounter()
}

// map memory area to page table
public def map(this: MemoryArea&, page_table: ActivePageTable var&) {
  for page in newPageRange(this.start, this.end) {
    this.handler.map(page_table, page, this.attr)
  }
}

// unmap memory area in page table
public def unmap(this: MemoryArea&, page_table: ActivePageTable var&) {
  for page in newPageRange(this.start, this.end) {
    this.handler.unmap(page_table, page)
  }
}

// check if overlaps with specific address range
public def isOverlap(this: MemoryArea&, start: usize, end: usize): bool {
  let p1 = this.start / PAGE_SIZE as usize
  let p2 = (this.end - 1 as usize) / (PAGE_SIZE + 1) as usize
  let p3 = start / PAGE_SIZE as usize
  let p4 = (end - 1 as usize) / (PAGE_SIZE + 1) as usize
  !(p1 >= p4 || p2 <= p3)
}


// linked list of memory area
public struct MemAreaList {
  area: MemoryArea,
  next: MemAreaList var*,
}

public def newMemAreaList(): MemAreaList {
  [MemAreaList] {}
}

public def del(this: MemAreaList var&) {
  var cur = this.next
  while cur != null as MemAreaList var* {
    (*cur).area.del()
    let next = (*cur).next
    heap.dealloc(cur as u8 var*)
    cur = next
  }
}

public def push(this: MemAreaList var&, area: MemoryArea) {
  let node = heap.alloc(sizeof MemAreaList) as MemAreaList var*
  (*node).area = area
  (*node).next = this.next
  this.next = node
}

public def unmap(this: MemAreaList var&, pt: ActivePageTable var&) {
  var cur = this.next
  while cur != null as MemAreaList var* {
    (*cur).area.unmap(pt)
    cur = (*cur).next
  }
}

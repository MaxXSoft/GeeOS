public import arch.arch

import mem.consts
import sync.spinlock
import lib.alloc

// Memory allocator by Kernighan and Ritchie,
// The C programming Language, 2nd ed.  Section 8.7.

// size of heap memory that to be allocated each time
let LEAST_ALLOC = 32 as usize

// definition of linked list header
struct Header {
  next: Header var*,
  size: usize,
}

struct Heap {
  // spinlock of heap
  lock: Spinlock,
  // head of linked list
  base: Header,
  // linked list that stores free memory blocks
  free_unit: Header var*,
  // definition of heap memory
  heap_mem: u8 var*,
  // definition of heap base pointer,
  heap_base: u8 var*,
}
var heap_mem: Heap

// allocate more heap space
def increaseHeap(size: usize): u8 var* {
  if heap_mem.heap_base + size > heap_mem.heap_mem + HEAP_SIZE {
    // heap is full
    null as u8 var*
  }
  else {
    // just increase
    let p = heap_mem.heap_base
    heap_mem.heap_base += size
    p
  }
}

def freeMem(ptr: u8 var*) {
  // point to the header
  let p = ptr as Header var* - 1
  var q = heap_mem.free_unit
  while !(p > q && p < (*q).next) {
    if q >= (*q).next && (p > q || p < (*q).next) {
      break
    }
    q = (*q).next
  }
  // merge with previous adjacent unit
  if p + (*p).size == (*q).next {
    (*p).size += (*(*q).next).size
    (*p).next = (*(*q).next).next
  }
  else {
    (*p).next = (*q).next
  }
  // merge with next adjacent unit
  if q + (*q).size == p {
    (*q).size += (*p).size
    (*q).next = (*p).next
  }
  else {
    (*q).next = p
  }
  // set the free unit pointer
  heap_mem.free_unit = q
}

def moreCore(len: usize): Header var* {
  // get size of increased headers
  let unit_size = LEAST_ALLOC * ((len + LEAST_ALLOC - 1 as usize) /
                                 LEAST_ALLOC)
  // allocate more headers
  let core_ptr = increaseHeap(unit_size * sizeof Header)
  if core_ptr == null as u8 var* {
    null as Header var*
  }
  else {
    // initialize new header
    let unit_ptr = core_ptr as Header var*
    (*unit_ptr).size = unit_size
    freeMem((unit_ptr + 1) as u8 var*)
    heap_mem.free_unit
  }
}

def allocMem(size: usize): u8 var* {
  let unit_size = ((size + sizeof Header - 1 as usize) /
                   sizeof Header) + 1 as usize
  var ret = null as u8 var*
  // check if no free blocks
  var prev = heap_mem.free_unit
  if prev == null as Header var* {
    prev = &heap_mem.base
    heap_mem.free_unit = prev
    heap_mem.base.next = heap_mem.free_unit
    heap_mem.base.size = 0 as usize
  }
  // allocate free block
  var p = (*prev).next
  while true {
    // big enough
    if (*p).size >= unit_size {
      if (*p).size == unit_size {
        // exactly
        (*prev).next = (*p).next
      }
      else {
        // allocate tail end
        (*p).size -= unit_size
        p += (*p).size
        (*p).size = unit_size
      }
      heap_mem.free_unit = prev
      ret = (p + 1) as u8 var*
      break
    }
    if p == heap_mem.free_unit {
      p = moreCore(unit_size)
      if p == null as Header var* {
        // no spare space
        ret = null as u8 var*
        break
      }
    }
    prev = p
    p = (*p).next
  }
  ret
}

// allocate new heap memory
def allocHeapMem(size: usize): u8 var* {
  heap_mem.lock.acquire()
  let ret = allocMem(size)
  heap_mem.lock.release()
  ret
}

// free allocated heap memory
def freeHeapMem(ptr: u8 var*) {
  heap_mem.lock.acquire()
  freeMem(ptr)
  heap_mem.lock.release()
}

// initialize heap memory
public def initHeapMem() {
  heap_mem.lock = newSpinlock()
  heap_mem.heap_mem = HEAP_BASE as u8 var*
  heap_mem.heap_base = heap_mem.heap_mem
  heap.init(allocHeapMem, freeHeapMem)
}

public import arch.arch

// definitions about RISC-V CSR

// constants definitions
// machine status register
inline let MSTATUS_MPP_MASK = (3 << 11) as usize
inline let MSTATUS_MPP_M    = (3 << 11) as usize
inline let MSTATUS_MPP_S    = (1 << 11) as usize
inline let MSTATUS_MPP_U    = (0 << 11) as usize
inline let MSTATUS_MIE      = (1 << 3) as usize
// supervisor status register
inline let SSTATUS_SUM      = (1 << 18) as usize
inline let SSTATUS_SPP      = (1 << 8) as usize
inline let SSTATUS_SPIE     = (1 << 5) as usize
inline let SSTATUS_UPIE     = (1 << 4) as usize
inline let SSTATUS_SIE      = (1 << 1) as usize
inline let SSTATUS_UIE      = (1 << 0) as usize
// supervisor interrupt enable
inline let SIE_SEIE         = (1 << 9) as usize
inline let SIE_STIE         = (1 << 5) as usize
inline let SIE_SSIE         = (1 << 1) as usize
// machine-mode interrupt enable
inline let MIE_MEIE         = (1 << 11) as usize
inline let MIE_MTIE         = (1 << 7) as usize
inline let MIE_MSIE         = (1 << 3) as usize
// supervisor address translation and protection
inline let SATP_SV32        = (1 << 31) as usize
// trap cause
inline let TRAP_S_SOFT_INT  = ((1 << 31) | 1) as usize
inline let TRAP_S_EXT_INT   = ((1 << 31) | 9) as usize
inline let TRAP_ILLEGAL     = 2 as usize
inline let TRAP_U_SYSCALL   = 8 as usize
inline let TRAP_INST_FAULT  = 12 as usize
inline let TRAP_LOAD_FAULT  = 13 as usize
inline let TRAP_STORE_FAULT = 15 as usize

// declarations of functions in 'csr.S'
extern declare getMstatus: (): usize
extern declare setMstatus: (usize)
extern declare setMepc: (usize)
extern declare getSstatus: (): usize
extern declare setSstatus: (usize)
extern declare getSip: (): usize
extern declare setSip: (usize)
extern declare getSie: (): usize
extern declare setSie: (usize)
extern declare getMie: (): usize
extern declare setMie: (usize)
extern declare setSepc: (usize)
extern declare getSepc: (): usize
extern declare getMedeleg: (): usize
extern declare setMedeleg: (usize)
extern declare getMideleg: (): usize
extern declare setMideleg: (usize)
extern declare setStvec: (usize)
extern declare getStvec: (): usize
extern declare setMtvec: (usize)
extern declare setSatp: (usize)
extern declare getSatp: (): usize
extern declare setSscratch: (usize)
extern declare setMscratch: (usize)
extern declare getScause: (): usize
extern declare getStval: (): usize
extern declare runSfence: (usize, usize)
inline def runSfence() {
  asm { "sfence.vma" }
}

// enable device interrupts
inline def setIntrOn() {
  setSie(getSie() | SIE_SEIE | SIE_STIE | SIE_SSIE)
  setSstatus(getSstatus() | SSTATUS_SIE)
}

// disable device interrupts
inline def setIntrOff() {
  setSstatus(getSstatus() & ~SSTATUS_SIE)
}

// check if device interrupts are enabled
inline def getIntr(): bool {
  (getSstatus() & SSTATUS_SIE) != 0 as usize
}

// make SATP value
inline def makeSatp(pt_addr: usize): usize {
  (pt_addr >> 12 as usize) | SATP_SV32
}

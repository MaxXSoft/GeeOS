// arch definitions of QEMU virt

// constant address
inline let FLASH_ADDR   = 0x20000000
inline let MEM_ADDR     = 0x80000000
inline let MEM_SIZE_MIB = 128
inline let SWITCH_ADDR  = 0x00000000
inline let LED_ADDR     = 0x00000000
inline let NUM_ADDR     = 0x00000000
inline let UART_ADDR    = 0x10000000
inline let UART_END     = 0x10000100
inline let PLIC_ADDR    = 0x0c000000
inline let PLIC_END     = 0x0c400000
inline let CLINT_MTIME  = 0x0200bff8
inline let CLINT_MCMP   = 0x02004000

// UART related definitions
inline let UART_DEV         = UART_ADDR as u8 volatile var*
inline let UART_CLOCK_FREQ  = 1843200 as u32
inline let UART_BAUD_RATE   = 115200 as u32
inline let UART_RBR         = 0x00
inline let UART_THR         = 0x00
inline let UART_DLL         = 0x00
inline let UART_DLM         = 0x01
inline let UART_IER         = 0x01
inline let UART_FCR         = 0x02
inline let UART_LCR         = 0x03
inline let UART_LSR         = 0x05
inline let UART_LCR_DLAB    = 0x80 as u8
inline let UART_LCR_8BIT    = 0x03 as u8
inline let UART_LCR_PODD    = 0x08 as u8
inline let UART_LSR_DA      = 0x01 as u8
inline let UART_LSR_RI      = 0x40 as u8

// initialize UART
inline def initIO() {
  let divisor = UART_CLOCK_FREQ / ((16 as u32) * UART_BAUD_RATE)
  UART_DEV[UART_LCR] = UART_LCR_DLAB
  UART_DEV[UART_DLL] = divisor as u8
  UART_DEV[UART_DLM] = (divisor >> 8 as u32) as u8
  UART_DEV[UART_LCR] = UART_LCR_PODD | UART_LCR_8BIT
  UART_DEV[UART_FCR] = 0x07 as u8
  UART_DEV[UART_IER] = 0x01 as u8
}

// initialize PLIC
inline def initIntr() {
  let UART_IRQ = 10
  let PLIC_UART_IRQ = (PLIC_ADDR + UART_IRQ * 4) as u32 volatile var*
  let S_MODE_INT_EN = (PLIC_ADDR + 0x2080) as u32 volatile var*
  let S_MODE_PRIORITY = (PLIC_ADDR + 0x201000) as u32 volatile var*
  (*PLIC_UART_IRQ) = 1 as u32
  (*S_MODE_INT_EN) = (1 << UART_IRQ) as u32
  (*S_MODE_PRIORITY) = 0 as u32
}

// acknowledge all IRQs from PLIC
inline def ackIntr() {}

// put character
inline def putChar(c: u8) {
  while (UART_DEV[UART_LSR] & UART_LSR_RI) == 0 as u8 {}
  UART_DEV[UART_THR] = c
}

// get character
inline def getChar(): i32 {
  if (UART_DEV[UART_LSR] & UART_LSR_DA) != 0 as u8 {
    UART_DEV[UART_RBR] as i32
  }
  else {
    -1
  }
}

// halt
inline def halt(code: i32) {
  while true {}
}

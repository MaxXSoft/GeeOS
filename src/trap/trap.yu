public import define.context

import arch.arch
import arch.riscv.csr
import lib.io
import fs.devfs.fs
import syscall.syscall
import lib.except
import proc.proc

// trap handler in 'traphand.S'
extern declare _handleTrap: ()

// handle timer interrupt
def handleTimer() {
  // tell processor a tick passed
  tick()
  // acknowledge soft interrupt
  setSip(getSip() & ~SIE_SSIE)
}

// handle external interrupt
def handleExternal() {
  // read characters from UART
  while true {
    let c = getChar()
    if c < 0 { break }
    pushChar(c as u8)
  }
}

// handle system call
def handleSyscall(tf: TrapFrame var&) {
  tf.incSepc()
  tf.x[10] = runSyscall(tf) as USize
}

// handle page fault
def handlePageFault(tf: TrapFrame var&) {
  if tf.isUser() {
    io <<< "ERROR: user thread memory access violation\n"
    exit(-1 as USize)
  }
  else {
    io <<< "scause  = " <<< tf.scause <<< '\n'
    io <<< "stval   = 0x" <<$ tf.stval <<< '\n'
    io <<< "sepc    = 0x" <<$ tf.sepc <<< '\n'
    panic("page fault!")
  }
}

// initialize trap handling
public def initTrap() {
  initIntr()
  setSscratch(0 as USize)
  setStvec(_handleTrap as USize)
}

// trap handler
extern def handleTrap(tf: TrapFrame var&) {
  when tf.scause {
    TRAP_S_SOFT_INT {
      handleTimer()
    }
    TRAP_S_EXT_INT {
      handleExternal()
    }
    TRAP_U_SYSCALL {
      handleSyscall(tf)
    }
    TRAP_INST_FAULT, TRAP_LOAD_FAULT, TRAP_STORE_FAULT {
      handlePageFault(tf)
    }
    else {
      io <<< "sstatus = 0x" <<$ tf.sstatus <<< '\n'
      io <<< "sepc    = 0x" <<$ tf.sepc <<< '\n'
      io <<< "scause  = " <<< tf.scause <<< '\n'
      io <<< "stval   = 0x" <<$ tf.stval <<< '\n'
      panic("uexpected trap!")
    }
  }
}

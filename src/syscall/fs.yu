import proc.proc
import fs.fs

// file type
public enum FileType {
  File, Dir, CharDevice, BlockDevice,
}

// file status
public struct Stat {
  ino: u32,
  file_type: FileType,
  size: usize,
  blk_size: usize,
  blocks: usize,
}

def convToFileType(this: INodeType): FileType {
  when this {
    INodeType.File { FileType.File }
    INodeType.Dir { FileType.Dir }
    INodeType.CharDevice { FileType.CharDevice }
    else { FileType.BlockDevice }
  }
}

def convToStat(this: Metadata&): Stat {
  [Stat] {
    this.id,
    this.itype.convToFileType(),
    this.size,
    this.blk_size as usize,
    this.blocks as usize,
  }
}

// NOTE: current implementation will not sync offset between two fds
public def sysDup3(oldfd: i32, newfd: i32, flags: i32): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  fds.lock()
  // get file1
  let file1 = fds.getFile(oldfd)
  if file1 == null as File var* || !(*file1).isOpened() {
    fds.unlock()
    return -1 as isize
  }
  // initialize file2
  var fd2 = newfd, file2 = fds.getFile(newfd)
  if file2 == null as File var* {
    // allocate new file
    if !fds.allocFd(fd2) {
      fds.unlock()
      return -1 as isize
    }
    file2 = fds.getFile(fd2)
  }
  else if (*file2).isOpened() {
    // close file2 if it is opened
    (*file2).close()
  }
  // duplicate
  (*file2).replaceWith(*file1)
  fds.unlock()
  fd2 as isize
}

public def sysChdir(path: u8*): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1
  fds.lock()
  // get target inode
  let path = newStrView(path)
  let inode = fds.getCwd().lookup(path)
  let meta = inode.getMetadata()
  if inode != null as INode var* && meta.itype == INodeType.Dir {
    // set inode as cwd
    fds.setCwd(inode)
    ret = 0
  }
  fds.unlock()
  ret as isize
}

public def sysOpen(path: u8*, flags: i32): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var fd = -1
  fds.lock()
  // lookup the specific file
  let path = newStrView(path)
  let inode = fds.getCwd().lookup(path)
  if inode != null as INode var* {
    // allocate a new file descriptor & open file
    !fds.allocFd(fd) || (*fds.getFile(fd)).open(inode, flags) < 0
  }
  fds.unlock()
  fd as isize
}

public def sysClose(fd: i32): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // close file & deallocate file descriptor
    ret = (*file).close()
    if ret >= 0 { fds.deallocFd(fd) }
  }
  fds.unlock()
  ret as isize
}

public def sysLseek(fd: i32, offset: usize, whence: i32): usize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1 as usize
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // seek offset
    ret = (*file).seek(offset, whence)
  }
  fds.unlock()
  ret
}

public def sysRead(fd: i32, buf: u8 var*, len: usize): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // read file
    ret = (*file).read(buf, len)
  }
  fds.unlock()
  ret as isize
}

public def sysWrite(fd: i32, buf: u8*, len: usize): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // write file
    ret = (*file).write(buf, len)
  }
  fds.unlock()
  ret as isize
}

public def sysFstat(fd: i32, buf: Stat var*): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  var ret = -1
  fds.lock()
  // get file by descriptor
  let file = fds.getFile(fd)
  if file != null as File var* {
    // get metadata
    var meta: Metadata
    if (*file).getMetadata(meta) {
      // fill file status info
      (*buf) = meta.convToStat()
      ret = 0
    }
  }
  fds.unlock()
  ret as isize
}

public def sysSync(): isize {
  let fds: FileInfo var& = getCurrentThread().getFds()
  fds.lock()
  let ret = if fds.getCwd().getFs().sync() { 0 } else { -1 }
  fds.unlock()
  ret as isize
}

public import proc.pool
public import proc.structs

import arch.arch
import lib.alloc
import arch.riscv.csr
import proc.consts

// model of processor
// objects of this structure will always be allocated on the heap
public struct Processor {
  // thread pool
  pool: ThreadPool,
  // idle thread
  idle: Thread var*,
  // current thread id
  current_tid: Tid,
  // current thread
  current_thread: Thread var*,
}

public def newProcessor(max_time: usize): Processor var* {
  let proc = heap.alloc(sizeof Processor) as Processor var*
  (*proc).pool.init(max_time)
  (*proc).idle = newIdleThread()
  (*proc).current_thread = null as Thread var*
  proc
}

// add thread to processor
public def addThread(this: Processor var*, thread: Thread var*) {
  (*this).pool.add(thread)
}

// get current thread id
public def getCurrentTid(this: Processor var*): Tid {
  (*this).current_tid
}

// get current thread
public def getCurrentThread(this: Processor var*): Thread var* {
  (*this).current_thread
}

// run current processor
public def run(this: Processor var*) {
  // turn off interrupts to prevent sync problem
  setIntrOff()
  // perform thread switching
  while true {
    // try to acquire next runnable thread
    var thread = (*this).pool.acquire((*this).current_tid)
    if thread != null as Thread var* {
      // update current thread
      (*this).current_thread = thread
      // switch to target thread
      (*this).idle.switchTo(thread)
      // thread exited or run out of time slice, switch back to idle
      // retrieve last thread to pool
      (*this).pool.retrieve((*this).current_tid, thread)
      (*this).current_thread = null as Thread var*
    }
    else {
      // enable interrupt
      setIntrOn()
      // wait for next tick
      asm { "wfi" }
      // disable interrupt and find next thread
      setIntrOff()
    }
  }
}

// yield and reschedule
public def yield(this: Processor var*) {
  if (*this).current_thread != null as Thread var* {
    // 'switchTo' does not ensure that 'sstatus' will
    // not be changed after switching, so
    // store 'sstatus' and disable interrupt
    let sstatus = getSstatus()
    setIntrOff()
    // switch to idle thread
    (*this).current_thread.switchTo((*this).idle)
    // restore 'sstatus'
    setSstatus(sstatus)
  }
}

// tell processor a tick passed
// will be called by timer interrupt handler
public def tick(this: Processor var*) {
  if (*this).current_thread != null as Thread var* {
    // check if current thread runs out of time slices
    if (*this).pool.tick() {
      this.yield()
    }
  }
}

// exit current thread
public def exit(this: Processor var*, code: usize) {
  // turn off interrupt because processor will switch to idle thread
  setIntrOff()
  // tell pool a thread just exited
  (*this).pool.exit((*this).current_tid, code)
  // wake up the thread that waiting for this thread
  let wait = (*this).current_thread.getWait()
  if wait != TID_NONE {
    (*this).pool.wakeUp(wait)
  }
  // switch to idle thread and schedule
  (*this).current_thread.switchTo((*this).idle)
  while true {}
}

// give up CPU and sleep
public def sleep(this: Processor var*) {
  if (*this).current_thread != null as Thread var* {
    // store 'sstatus' and disable interrupt
    let sstatus = getSstatus()
    setIntrOff()
    // tell pool a thread will sleep
    (*this).pool.sleep((*this).current_tid)
    // switch to idle thread
    (*this).current_thread.switchTo((*this).idle)
    // restore 'sstatus'
    setSstatus(sstatus)
  }
}

// wake up current thread
public def wakeUp(this: Processor var*, tid: Tid) {
  (*this).pool.wakeUp(tid)
}
